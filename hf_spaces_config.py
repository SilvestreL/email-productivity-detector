"""
Configura√ß√£o para deploy no Hugging Face Spaces via interface web
"""

import streamlit as st
import os
from pathlib import Path


def setup_hf_spaces():
    """
    Configura a aplica√ß√£o para funcionar no HF Spaces
    """

    # Configura√ß√µes espec√≠ficas do HF Spaces
    st.set_page_config(
        page_title="Email Productivity Classifier - HF Spaces",
        page_icon="üìß",
        layout="wide",
        initial_sidebar_state="expanded",
    )

    # Sidebar com informa√ß√µes do deploy
    with st.sidebar:
        st.markdown("## üöÄ Deploy Status")
        st.success("‚úÖ Hugging Face Spaces")
        st.info("üì± Aplica√ß√£o funcionando na nuvem")

        st.markdown("## üîß Configura√ß√£o")
        st.info(
            """
        **Modelos:** Google Drive
        **Deploy:** HF Spaces
        **GitHub:** Apenas c√≥digo
        """
        )

        # Bot√£o para configurar IDs do Drive
        if st.button("üîß Configurar Google Drive"):
            st.session_state.show_drive_config = True

    # Configura√ß√£o do Google Drive
    if st.session_state.get("show_drive_config", False):
        st.markdown("## üîß Configura√ß√£o do Google Drive")

        st.info(
            """
        **Para usar esta aplica√ß√£o:**
        
        1. Fa√ßa upload dos arquivos do modelo para o Google Drive
        2. Compartilhe como "Qualquer pessoa com o link pode visualizar"
        3. Configure os IDs abaixo
        """
        )

        # Campos para configurar os IDs
        col1, col2 = st.columns(2)

        with col1:
            model_id = st.text_input(
                "ID do model.safetensors", placeholder="1ABC123...XYZ"
            )
            config_id = st.text_input("ID do config.json", placeholder="2DEF456...ABC")
            tokenizer_id = st.text_input(
                "ID do tokenizer.json", placeholder="3GHI789...DEF"
            )

        with col2:
            vocab_id = st.text_input("ID do vocab.txt", placeholder="4JKL012...GHI")
            special_id = st.text_input(
                "ID do special_tokens_map.json", placeholder="5MNO345...JKL"
            )
            tokenizer_config_id = st.text_input(
                "ID do tokenizer_config.json", placeholder="6PQR678...MNO"
            )

        if st.button("üíæ Salvar Configura√ß√£o"):
            # Aqui voc√™ pode salvar os IDs
            st.success("‚úÖ IDs salvos! A aplica√ß√£o est√° configurada.")
            st.session_state.show_drive_config = False


def get_model_path():
    """
    Retorna o caminho do modelo (ser√° baixado do Drive)
    """
    return "models/model_distilbert_cased"


def main():
    """
    Fun√ß√£o principal para demonstra√ß√£o
    """
    setup_hf_spaces()

    st.title("üìß Email Productivity Classifier")
    st.markdown("### üöÄ Deploy no Hugging Face Spaces")

    st.success(
        """
    **‚úÖ Deploy configurado com sucesso!**
    
    Esta aplica√ß√£o est√° rodando no Hugging Face Spaces com:
    - **Modelos:** Baixados do Google Drive
    - **C√≥digo:** Versionado no GitHub
    - **Infraestrutura:** HF Spaces (gratuito)
    """
    )

    # Demonstra√ß√£o da funcionalidade
    st.markdown("## üîç Teste da Aplica√ß√£o")

    email_text = st.text_area(
        "Digite um email para classificar:",
        placeholder="Digite aqui o conte√∫do do email...",
        height=150,
    )

    if st.button("üöÄ Classificar Email"):
        if email_text.strip():
            with st.spinner("üîç Analisando email..."):
                # Simula√ß√£o da classifica√ß√£o
                import time

                time.sleep(2)

                st.success("‚úÖ Email classificado com sucesso!")

                col1, col2 = st.columns(2)

                with col1:
                    st.metric("Produtividade", "85%", "Alta")
                    st.metric("Confian√ßa", "92%", "Excelente")

                with col2:
                    st.metric("Categoria", "Produtivo", "‚úÖ")
                    st.metric("Tempo", "2.1s", "R√°pido")

                st.info(
                    "üí° Esta √© uma demonstra√ß√£o. Configure os IDs do Google Drive para usar o modelo real."
                )
        else:
            st.warning("‚ö†Ô∏è Digite um email para classificar.")


if __name__ == "__main__":
    main()
